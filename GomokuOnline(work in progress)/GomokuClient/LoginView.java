
/**
 * Team One GUI Implementation Gomoku CSCE 320 - Spring 2015 3/16/2015 Java -
 * JVM Sources:
 *
 * Revisions: 3/14/2015 - View created by Karen Bullinger.
 */
import java.awt.event.ActionEvent;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class LoginView extends javax.swing.JPanel {

    private LoginController controller;
    byte[] input = new byte[1024];
    char[] passwordArray;

    /**
     * Creates new form Login
     */
    /**
     * Initializes view components, associates controller with view.
     */
    public LoginView() {
        System.out.println("Login view created");
        initComponents();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        usernameTF = new javax.swing.JTextField();
        passwordTF = new javax.swing.JPasswordField();
        registerB = new javax.swing.JButton();
        loginB = new javax.swing.JButton();
        gomokuL = new javax.swing.JLabel();
        UsernameL = new javax.swing.JLabel();
        PasswordL = new javax.swing.JLabel();
        aiList = new javax.swing.JComboBox();
        portTF = new javax.swing.JTextField();
        portL = new javax.swing.JLabel();
        ipL = new javax.swing.JLabel();
        ipTF = new javax.swing.JTextField();
        orL = new javax.swing.JLabel();
        playOfflineL = new javax.swing.JLabel();
        quitB = new javax.swing.JButton();

        usernameTF.setColumns(10);

        passwordTF.setColumns(10);

        registerB.setText("Register");
        registerB.setToolTipText("Register");
        registerB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBActionPerformed(evt);
            }
        });

        loginB.setText("Login");
        loginB.setToolTipText("Login");
        loginB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBActionPerformed(evt);
            }
        });

        gomokuL.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        gomokuL.setText("Gomoku");

        UsernameL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        UsernameL.setText("Username:");

        PasswordL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        PasswordL.setText("Password:");

        aiList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Difficulty", "Easy", "Moderate", "Hard" }));
        aiList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        aiList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aiListActionPerformed(evt);
            }

            
        });

        portL.setText("Port");

        ipL.setText("IP Address");

        ipTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipTFActionPerformed(evt);
            }

            
        });

        orL.setText("OR");

        playOfflineL.setText("Play Offline:");

        quitB.setText("Quit");
        quitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBActionPerformed(evt);
            }});
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(gomokuL))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(UsernameL)
                                            .addComponent(PasswordL))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(usernameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                            .addComponent(passwordTF)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(registerB, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(loginB, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(playOfflineL)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(aiList, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(portL)
                                    .addComponent(ipL))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ipTF, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(portTF, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                                        .addComponent(quitB))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(orL)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {passwordTF, usernameTF});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gomokuL)
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UsernameL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(passwordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PasswordL))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(registerB)
                            .addComponent(loginB))
                        .addGap(18, 18, 18)
                        .addComponent(orL)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(aiList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playOfflineL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ipL)
                            .addComponent(ipTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(portL)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(quitB)))
                .addContainerGap())
        );
    }// </editor-fold>                        

    /**
     * Associates view with controller.
     *
     * @param cont
     */
    public void setController(LoginController cont) {
        this.controller = cont;
        
        System.out.println(controller);
    }

    public void setControllerView(){
        controller.setView(this);
    }
    
    


    /**
     * Closes application if quit button is pressed.
     *
     * @param evt
     */
    private void quitBActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }
    
    private void aiListActionPerformed(ActionEvent evt) {
                String difficulty = (String) aiList.getSelectedItem();
               if(!difficulty.equals("Select Difficulty")){
            	   controller.aiGame(difficulty);
               }
            }
    
    private void ipTFActionPerformed(ActionEvent evt) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

    /**
     * Initializes login process when login button is pressed.
     *
     * @param evt
     */
    private void loginBActionPerformed(java.awt.event.ActionEvent evt) {
        if(!ipTF.getText().equals(""))
            controller.host = ipTF.getText();
        if(!portTF.getText().equals(""))
            controller.port = Integer.parseInt(portTF.getText());
            
        if (usernameTF.getText().length() < 1 || passwordTF.getPassword().length < 1) {
            displayErrorMessage("Please enter a username and password.");
        } else {
            System.out.println(controller);
            controller.newConnection();
            char[] passwordArray = passwordTF.getPassword();
            String passwordinput = new String(passwordArray);
            controller.login(usernameTF.getText(), passwordinput.hashCode());
            controller.setUsername(usernameTF.getText());
        }

    }

    private void registerBActionPerformed(java.awt.event.ActionEvent evt) {
        if(!ipTF.getText().equals(""))
            controller.host = ipTF.getText();
        if(!portTF.getText().equals(""))
            controller.port = Integer.parseInt(portTF.getText());

        if (usernameTF.getText().length() > 0 && passwordTF.getPassword().length > 0) {
            if (usernameTF.getText().contains(" ") || new String(passwordTF.getPassword()).contains(" ")) {
                displayErrorMessage("Username/password cannot contain spaces.");
            } else {
                System.out.println("Executing else.");
                controller.newConnection();
                char[] passwordArray = passwordTF.getPassword();
                String passwordinput = new String(passwordArray);
                controller.register(usernameTF.getText(), passwordinput.hashCode());
                controller.setUsername(usernameTF.getText());
            }
        } else {
            displayErrorMessage("Please enter a username and password.");

        }
    }

    /**
     * Error message pop up box.
     *
     * @param errorMessage
     */
    void displayErrorMessage(String errorMessage) {

        JOptionPane.showMessageDialog(this, errorMessage);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel PasswordL;
    private javax.swing.JLabel UsernameL;
    private javax.swing.JComboBox aiList;
    private javax.swing.JLabel gomokuL;
    private javax.swing.JButton loginB;
    private javax.swing.JLabel orL;
    public javax.swing.JPasswordField passwordTF;
    private javax.swing.JLabel playOfflineL;
    private javax.swing.JButton quitB;
    private javax.swing.JButton registerB;
    public javax.swing.JTextField usernameTF;
    private JTextField ipTF;
    private JTextField portTF;
    private JLabel ipL, portL;
    
    // End of variables declaration//GEN-END:variables
}
